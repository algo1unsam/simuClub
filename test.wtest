import club.*

describe " Un Club, bellota, bombon y burbuja son jugadoras, y el profesor es un socio comun."{

 	const bellota = new Jugador(pase = 1000000)
 	const bombon = new Jugador(pase = 1000, partidos = 100)
 	const burbuja = new Jugador(pase = 1000, partidos = 10)
 	const profesor = new Socio(antiguedad=10)
	
 	const futbol = new Equipo (integrantes =#{bellota,burbuja}, destacado = bellota)
 	const basquet = new Equipo (integrantes =#{bellota, bombon,burbuja}, destacado = burbuja)
 	const pintura = new ActividadSocial (integrantes =#{profesor,burbuja}, destacado = profesor)
	
    const unClubTradicional = new Tradicional(gastoMensual = 9990 , socios=#{bellota, bombon, burbuja, profesor}, actividades=#{futbol, basquet, pintura})
	
 	method initialize(){
 	municipio.addClub(unClubTradicional)	
 	}

 	test "Todos los socios de un club" {
 		assert.equals(#{bellota, bombon, burbuja, profesor}, unClubTradicional.socios())
 	}
	
	test "Todos los jugadores de un equipo" {
		assert.equals(#{bellota, burbuja}, futbol.integrantes())
		assert.equals(#{profesor, burbuja}, pintura.integrantes())
	}
	
	test "El profesor es el mas antiguo" {
		assert.equals(profesor, unClubTradicional.socioMasAntiguo())	
	}
	test "Los socios destacados" {
		assert.equals(#{bellota, burbuja, profesor}, unClubTradicional.sociosDestacados().asSet())
	}
	
	test "Cantidad de actividades"{
		assert.that(basquet.participa(burbuja))
		assert.that(futbol.participa(burbuja))
		assert.that(pintura.participa(burbuja))
		assert.equals(3, unClubTradicional.cantidadActividades(burbuja))
	}
	//ESTRELLAS
	test "Estrellas Tradicional"  {
		assert.that(bellota.esEstrella())
		assert.that(bombon.esEstrella())
		assert.that(burbuja.esEstrella())
		assert.notThat(profesor.esEstrella())
	}
}

describe "Club Profesional, bellota, bombon y burbuja son jugadoras, y el profesor es un socio comun."{

	const bellota = new Jugador(pase = 1000000)
	const bombon = new Jugador(pase = 1000, partidos = 100)
	const burbuja = new Jugador(pase = 1000, partidos = 10)
	const profesor = new Socio(antiguedad=10)
	
	const futbol = new Futbol (integrantes =#{bellota,burbuja}, destacado = bellota)
	const basquet = new Equipo (integrantes =#{bellota, bombon,burbuja}, destacado = burbuja)
	const pintura = new ActividadSocial (integrantes =#{profesor,burbuja}, destacado = profesor)
	
	const unClubProfesional = new Profesional(gastoMensual = 9990 , socios=#{bellota, bombon, burbuja, profesor}, actividades=#{futbol, basquet, pintura})
	
	method initialize(){
	municipio.addClub(unClubProfesional)	
	}
	//ESTRELLAS
	test "Estrellas Profesional"  {
		assert.that(bellota.esEstrella())
		assert.that(bombon.esEstrella())
		assert.notThat(burbuja.esEstrella())
		assert.notThat(profesor.esEstrella())
	}	
}

describe "Club Comunitario, bellota, bombon y burbuja son jugadoras, y el profesor es un socio comun."{

	const bellota = new Jugador(pase = 1000000)
	const bombon = new Jugador(pase = 1000, partidos = 100)
	const burbuja = new Jugador(pase = 1000, partidos = 10)
	const profesor = new Socio(antiguedad=10)
	
	const futbol = new Futbol (integrantes =#{bellota,burbuja}, destacado = bellota)
	const basquet = new Equipo (integrantes =#{bellota, bombon,burbuja}, destacado = burbuja)
	const pintura = new ActividadSocial (integrantes =#{profesor,burbuja}, destacado = profesor)
	
	const unClubComunitario = new Comunitario(socios=#{bellota, bombon, burbuja, profesor}, actividades=#{futbol, basquet, pintura})
	
	method initialize(){
	municipio.addClub(unClubComunitario)	
	}
	 test "Estrellas Comunitario"  {
		assert.that(bombon.esEstrella())
		assert.that(burbuja.esEstrella())
		assert.notThat(bellota.esEstrella())
		assert.notThat(profesor.esEstrella())
	}	
}

describe "Evaluaciones."{

	const bellota = new Jugador(pase = 1000000)
	const bombon = new Jugador(pase = 1000, partidos = 100)
	const burbuja = new Jugador(pase = 1000, partidos = 10)
	const profesor = new Socio(antiguedad=10)
	const oliverAtom =  new Jugador(pase = 1000, partidos = 100)
	const tom=  new Jugador(pase = 1000, partidos = 100)
	
	const niupi = new Futbol (integrantes =#{oliverAtom,tom}, destacado = oliverAtom)
	const futbol = new Futbol (integrantes =#{bellota,burbuja}, destacado = bellota)
	const basquet = new Equipo (integrantes =#{bellota, bombon,burbuja}, destacado = burbuja)
	const pintura = new ActividadSocial (integrantes =#{profesor,burbuja}, destacado = profesor, valor = 200)
	const tango = new ActividadSocial (integrantes =#{profesor,burbuja}, destacado = profesor, valor = 100)
	
	const unClubTradicional = new Tradicional(gastoMensual = 9990 , socios=#{bellota, bombon, burbuja, profesor}, actividades=#{futbol, basquet, pintura})
	const unClubProfesional = new Profesional(socios=#{bellota, bombon, burbuja, profesor}, actividades=#{futbol, basquet, pintura})
	const unClubComunitario = new Comunitario(socios=#{bellota, bombon, burbuja, profesor}, actividades=#{futbol, basquet, pintura})
	const niupiClub = new Profesional(socios=#{oliverAtom, tom}, actividades=#{niupi,tango})
	
	method initialize(){
	municipio.addClub(unClubTradicional)	
	municipio.addClub(unClubProfesional)	
	municipio.addClub(unClubComunitario)	
	}
	
	  test "evaluacion equipo basquet"  {
		assert.equals(11 , basquet.evaluar())
	}
	  test "evaluacion equipo futbol"  {
		assert.equals(19 , futbol.evaluar())
	}
	  test "evaluacion actividad social"  {
		assert.equals(100 , tango.evaluar())
	}
	  test "Evaluacion club Tradicional"  {
		//assert.equals(-2500 , unClubTradicional.evaluar())
	}
	  test "Evaluacion club Profesional"  {
		assert.equals(115 , unClubProfesional.evaluar())
	}
	  test "Evaluacion club Comunitario"  {
		assert.equals(57.5 , unClubComunitario.evaluar())
	}
	  test "Equipo no experimentado"  {
		assert.notThat(futbol.experimentado())
	}
	  test "Equipo experimentado"  {
		assert.that(niupi.experimentado())
	}
	  test "Club prestigioso"  {
		assert.that(niupiClub.esPrestigioso())
	}
}
